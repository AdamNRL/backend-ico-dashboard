FORMAT: 1A
HOST: http://ico-dashboard:3000/

# Jincor ICO dashboard backend

Almost all operations require 2-factor Authentication.
To fulfill this requirement most of them are split to 2 endpoints: first (e.g. /user/login/initiate)
initiates login and generates JWT token. Next this token must be verified using endpoint /user/login/verify.

## Register user [/user]

User's email must be verified after registration. Next step after calling this endpoint is `POST /user/activate` using `verification.id` from response.

### Register new user [POST]

+ email `test@test.com` (string, required, email)
+ password `passwordA6` (string, required, min: 6, regex: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$)
+ name `ICO investor` (string, required, min: 3)
+ agreeTos `true` (boolean, equals: true)
+ referral `referral@test.com` (optional, string, base64 encoded email)

+ Request (application/json)

        {
            "email": "ortgma@gmail.com",
            "name": "ICO investor",
            "password": "test12A6!@#$%^&*()_-=+|/",
            "referral": "dGVzdEB0ZXN0LmNvbQ",
            "agreeTos": true
        }

+ Response 200 (application/json)

        {
            "id": "fb10d98f-2a5e-430d-bf2a-c76b42259b74",
            "email": "ortgma@gmail.com",
            "name": "ICO investor",
            "agreeTos": true,
            "verification": {
                "id": "3ed09e0a-72e1-417b-a05c-f0f08a5e1ffa",
                "method": "email"
            },
            "isVerified": false,
            "defaultVerificationMethod": "email",
            "referralCode": "b3J0Z21hQGdtYWlsLmNvbQ",
            "referral": "test@test.com"
        }

## Activate a user [/user/activate]

This endpoint response with JWT token so user can be immediately redirected to dashboard.
JWT token received by `/activate` DOES NOT require verification.
This endpoint's response also contains VERY important information: mnemonic phrase and private key of
user's ethereum address. This information should be saved by user. If user loses this he will also LOSE
access to his wallet of ICO dashboard.

### Activate a user [POST]

+ email `test@test.com` (string, required, email)
+ verificationId `bb38971-1f22-4f99-a904-62fb44430ab4` (string, required)
+ code `123456` (string, required)

+ Request (application/json)

        {
            "email": "test@test.com",
            "verificationId": "5bb38971-1f22-4f99-a904-62fb44430ab4",
            "code": "327845"
        }

+ Response 200 (application/json)

        {
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY5NzM5MmVjLTBlYzItNGI3Mi04NmFiLTExMmYxM2ViOWYxNSIsImxvZ2luIjoib3J0Z21hQGdtYWlsLmNvbSIsImRldmljZUlkIjoiZGV2aWNlIiwianRpIjoiZjk3MzkyZWMtMGVjMi00YjcyLTg2YWItMTEyZjEzZWI5ZjE1ZGV2aWNlMTUwNzgxNjcyOTk2MCIsImlhdCI6MTUwNzgxNjcyOTk2MCwic3ViIjoiYWU3YzViNzYtNTgyMS00ZGUyLWE2OGYtZGQ0YzAwN2VkODM0IiwiYXVkIjoiamluY29yLmNvbSIsImV4cCI6MTUwNzgxNzMzNDc2MH0.Va8aBa_kDY2sqz2iZRnRWcOCF6cAGU5T69Y3-Ijg9KI",
            "wallets": [
                {
                    "ticker": "ETH",
                    "address": "0xdb369b56BA7b07cF287f611Fbf0DAA4A8a4C2751",
                    "balance": "0",
                    "mnemonic": "skull rain doctor wine stand pigeon roof half laundry tank hero behave",
                    "privateKey": "0xda2b3f0590d9f0a8e310203e1c7136693d0954420a82ab2cbcfa88eca07b4b31"
                }
            ]
        }

## Initiate login [/user/login/initiate]

The accessToken got from this endpoint response MUST BE ALWAYS verified via `/user/login/verify`.
Authentication attempts with not verified token will result in 401 response.

### Initiate login [POST]

+ email `test@test.com` (string, required, email)
+ password `passwordA6` (string, required)

+ Request (application/json)

        {
            "email": "test@test.com",
            "password": "test12A6!@#$%^&*()_-=+|/"
        }

+ Response 200 (application/json)

        {
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjNhYTQzMzA0LTNhMTEtNDNkNy05NjNhLTRmNDA0OTY2MDVmMyIsImxvZ2luIjoidGVzdEB0ZXN0LmNvbSIsImRldmljZUlkIjoiZGV2aWNlIiwianRpIjoiM2FhNDMzMDQtM2ExMS00M2Q3LTk2M2EtNGY0MDQ5NjYwNWYzZGV2aWNlMTUwNzcxOTg1MzcwNiIsImlhdCI6MTUwNzcxOTg1MzcwNiwic3ViIjoiNWJiMzg5NzEtMWYyMi00Zjk5LWE5MDQtNjJmYjQ0NDMwYWI0IiwiYXVkIjoiamluY29yLmNvbSIsImV4cCI6MTUwNzcyMDQ1ODUwNn0.vaZtMpPlPZDSLCVpMMC2dpCvbSram9mXNBPAaxSupKc",
            "isVerified": false,
            "verification": {
                "verificationId": "7fa96769-7bcc-4705-b544-02a83707cfc8",
                "consumer": "test@test.com",
                "expiredOn": 1507720153,
                "status": 200,
                "method": "email"
            }
        }

## Verify login [/user/login/verify]

+ accessToken `token` (required, string)
+ verification
    + id (string, required)
    + code (string, required)
    + method (string, required)

### Verify login [POST]

+ Request (application/json)

        {
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjNhYTQzMzA0LTNhMTEtNDNkNy05NjNhLTRmNDA0OTY2MDVmMyIsImxvZ2luIjoidGVzdEB0ZXN0LmNvbSIsImRldmljZUlkIjoiZGV2aWNlIiwianRpIjoiM2FhNDMzMDQtM2ExMS00M2Q3LTk2M2EtNGY0MDQ5NjYwNWYzZGV2aWNlMTUwNzcxOTg1MzcwNiIsImlhdCI6MTUwNzcxOTg1MzcwNiwic3ViIjoiNWJiMzg5NzEtMWYyMi00Zjk5LWE5MDQtNjJmYjQ0NDMwYWI0IiwiYXVkIjoiamluY29yLmNvbSIsImV4cCI6MTUwNzcyMDQ1ODUwNn0.vaZtMpPlPZDSLCVpMMC2dpCvbSram9mXNBPAaxSupKc",
            "verification": {
                "id": "7fa96769-7bcc-4705-b544-02a83707cfc8",
                "code": "544188",
                "method": "email"
            }
        }

+ Response 200 (application/json)

        {
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjNhYTQzMzA0LTNhMTEtNDNkNy05NjNhLTRmNDA0OTY2MDVmMyIsImxvZ2luIjoidGVzdEB0ZXN0LmNvbSIsImRldmljZUlkIjoiZGV2aWNlIiwianRpIjoiM2FhNDMzMDQtM2ExMS00M2Q3LTk2M2EtNGY0MDQ5NjYwNWYzZGV2aWNlMTUwNzcxOTg1MzcwNiIsImlhdCI6MTUwNzcxOTg1MzcwNiwic3ViIjoiNWJiMzg5NzEtMWYyMi00Zjk5LWE5MDQtNjJmYjQ0NDMwYWI0IiwiYXVkIjoiamluY29yLmNvbSIsImV4cCI6MTUwNzcyMDQ1ODUwNn0.vaZtMpPlPZDSLCVpMMC2dpCvbSram9mXNBPAaxSupKc",
            "isVerified": true,
            "verification": {
                "verificationId": "7fa96769-7bcc-4705-b544-02a83707cfc8",
                "consumer": "test@test.com",
                "expiredOn": 1507720153,
                "status": 200,
                "method": "email"
            }
        }

## Initiate password change [/user/me/passwordChange/initiate]

### Initiate password change [POST]

+ oldPassword `passwordA1` (string, required)
+ newPassword `passwordA6` (string, required, regex: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z0\d!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]{8,}$/)

+ Request (application/json)

        {
            "oldPassword": "test12A6!@#$%^&*()_-=+|/",
            "newPassword": "passwordA1"
        }

+ Response 200 (application/json)

        {
            "verification": {
                "verificationId": "8f9ba03c-e903-459c-adb9-7594865a03a4",
                "consumer": "ortgma@gmail.com",
                "expiredOn": 1508268673,
                "status": 200,
                "method": "email"
            }
        }

## Verify password change [/user/me/passwordChange/verify]

+ oldPassword (required, string)
+ newPassword (required, string, regex: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z0\d!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]{8,}$/)
+ verification
    + verificationId (string, required)
    + code (string, required)

### Verify password change [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer token
            Accept: application/json

    + body

            {
                "oldPassword": "test12A6!@#$%^&*()_-=+|/",
                "newPassword": "passwordA1",
                "verification": {
                    "verificationId": "d65aa8f7-3b8a-4764-a003-1ecd06dda7fd",
                    "code": "186198"
                }
            }

+ Response 200 (application/json)

        {
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImJiNWRjOTBjLTM1NTktNDZhNS04MGNhLTA3Mjg0OTczMjdlYiIsImxvZ2luIjoib3J0Z21hQGdtYWlsLmNvbSIsImRldmljZUlkIjoiZGV2aWNlIiwianRpIjoiYmI1ZGM5MGMtMzU1OS00NmE1LTgwY2EtMDcyODQ5NzMyN2ViZGV2aWNlMTUwODI2NTEwMjQ1NSIsImlhdCI6MTUwODI2NTEwMjQ1NSwic3ViIjoiOGY5YmEwM2MtZTkwMy00NTljLWFkYjktNzU5NDg2NWEwM2E0IiwiYXVkIjoiamluY29yLmNvbSIsImV4cCI6MTUwODI2NTcwNzI1NX0.9HDUMmamSIZX7T0qTKId6oN4XYU7ni7Wx8lQSiIz1S0"
        }

## Get user info [/user/me]

### Get user info [GET]

+ Request
    + Headers

            Authorization: Bearer token
            Accept: application/json

+ Response 200 (application/json)

        {
            "ethAddress": "0xdb369b56BA7b07cF287f611Fbf0DAA4A8a4C2751",
            "kycStatus": "Not verified"
        }

## Get dashboard info [/dashboard]

### Get dashboard info [GET]

+ Request

    + Headers

            Authorization: Bearer token
            Accept: application/json

+ Response 200 (application/json)

        {
            "ethBalance": "1.0001",
            "jcrTokensSold": "5000",
            "jcrTokenPrice": {
                "ETH": "0.005",
                "USD": "1"
            },
            "raised": {
                "ETH": "2000",
                "USD": "1000000",
                "BTC": "100"
            },
            "daysLeft": 10
        }

## Get referral info [/dashboard/referral]

### Get referral info [GET]

+ Request
    + Headers

            Authorization: Bearer token
            Accept: application/json

+ Response 200 (application/json)

        {
            "data": "dGVzdEB0ZXN0LmNvbQ",
            "users": [
                {
                    "date": 1508241475,
                    "name": "Investor 1",
                    "walletAddress": "0x54c0B824d575c60F3B80ba1ea3A0cCb5EE3F56eA",
                    "tokens": "105"
                },
                {
                    "date": 1508241475,
                    "name": "Investor 2",
                    "walletAddress": "0x54c0B824d575c60F3B80ba1ea3A0cCb5EE3F56eB",
                    "tokens": "1.01"
                }
            ]
        }